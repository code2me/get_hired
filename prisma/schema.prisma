// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean    @default(false)
  isRecuriter   Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  candidate     Candidate?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Candidate {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  name            String
  role            String
  yoe             String
  qualification   String
  ectc            String
  skills          String[]
  about           String
  resume          String?
  reason_to_apply String
  email           String
  phone           String
  jobIDs          String[] @db.ObjectId
  jobs            Job[]    @relation(fields: [jobIDs], references: [id])
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime    @default(now())
  company       String
  company_logo  String?
  role          String
  location      String
  yoe           String
  qualification String
  ctc           String
  skills        String[]
  jd            String
  perks         String
  email         String
  phone         String
  candidateIDs  String[]    @db.ObjectId
  candidates    Candidate[] @relation(fields: [candidateIDs], references: [id])
}
